""""
Django settings for restapi project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os # <<< ADD THIS IMPORT
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Read SECRET_KEY from environment variable.
# The second argument to os.environ.get is a default value,
# which is useful for local development if the environment variable isn't set.
# For production on PythonAnywhere, the environment variable *must* be set (e.g., in your WSGI file).
SECRET_KEY = os.environ.get(
    'DJANGO_SECRET_KEY',
    'django-insecure-d%ywod+b-a_)lic0w^ox)ddo&3y7*sdwf1$+ba%3!=^vvew^io' # Fallback for local dev (consider removing for true production if key always set by env)
)

# SECURITY WARNING: don't run with debug turned on in production!
# Read DEBUG status from environment variable.
# Environment variables are strings, so compare to 'True' or 'False'.
DEBUG = os.environ.get('DEBUG', 'True') == 'True' # Default to True (local dev) if not set

# Read ALLOWED_HOSTS from environment variable (should be a comma-separated string)
allowed_hosts_env = os.environ.get('ALLOWED_HOSTS')
if allowed_hosts_env:
    ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_env.split(',')]
else:
    # For local development if DEBUG is True and ALLOWED_HOSTS is not set via env var
    if DEBUG:
        ALLOWED_HOSTS = ['localhost', '127.0.0.1']
    else:
        # In production (DEBUG=False), ALLOWED_HOSTS *must* be set and not empty.
        # Django will raise an ImproperlyConfigured error if it's empty and DEBUG is False.
        # It will be set by your WSGI file on PythonAnywhere.
        ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',    # For building APIs
    'corsheaders',       # For Cross-Origin Resource Sharing
    'pdf_reader',        # Your app
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # Should be high up
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'restapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'restapi.wsgi.application' # This should point to the wsgi.py inside your 'restapi' folder


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3', # This will be in /home/zvallarino/backend-pdf/db.sqlite3
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# Define STATIC_ROOT for 'collectstatic' command in production
STATIC_ROOT = BASE_DIR / 'staticfiles_production'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# CORS settings
# Read CORS_ALLOWED_ORIGINS from environment variable (should be a comma-separated string)
cors_origins_env = os.environ.get('CORS_ALLOWED_ORIGINS')
if cors_origins_env:
    CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_origins_env.split(',')]
else:
    if DEBUG: # If in local development (DEBUG=True) and env var not set, allow local frontend
        CORS_ALLOWED_ORIGINS = [
            "http://localhost:3000",
            "http://127.0.0.1:3000",
        ]
    else: # In production, if not set by env var, make it an empty list (more secure than allowing all)
        CORS_ALLOWED_ORIGINS = []
